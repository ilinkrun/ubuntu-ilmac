version: '3.8'

# Production environment overrides
services:
  # Auth Service - Production Mode
  auth-service:
    build:
      context: ../infrastructure/auth-service
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Database Service - Production Mode
  database-service:
    build:
      context: ../infrastructure/database-service
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # API Gateway - Production Mode
  api-gateway:
    build:
      context: ../infrastructure/api-gateway
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Management Hub Frontend - Production Mode
  management-hub-frontend:
    build:
      context: ../management-hub/frontend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Management Hub Backend - Production Mode
  management-hub-backend:
    build:
      context: ../management-hub/backend
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PostgreSQL with production settings
  postgres:
    environment:
      - POSTGRES_DB=prod_metadata
      - POSTGRES_USER=prod_user
      - POSTGRES_PASSWORD=${POSTGRES_PROD_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis with production settings
  redis:
    volumes:
      - redis_prod_data:/data
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - api-gateway
      - management-hub-frontend
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ../infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3005:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    restart: always

volumes:
  postgres_prod_data:
  redis_prod_data:
  prometheus_data:
  grafana_data: